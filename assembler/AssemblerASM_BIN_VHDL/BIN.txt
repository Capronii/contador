tmp(0) := x"NOP & '0' & x"00";	-- NOP 
tmp(1) := x"LDI & '0' & x"00";	-- LDI $0    	#InÃ­cio do Setup
tmp(2) := x"STA & '1' & x"20";	-- STA @288    	#Zerando hexas
tmp(3) := x"STA & '1' & x"21";	-- STA @289
tmp(4) := x"STA & '1' & x"22";	-- STA @290
tmp(5) := x"STA & '1' & x"23";	-- STA @291
tmp(6) := x"STA & '1' & x"24";	-- STA @292
tmp(7) := x"STA & '1' & x"25";	-- STA @293
tmp(8) := x"STA & '1' & x"00";	-- STA @256    	#Zerando leds
tmp(9) := x"STA & '1' & x"01";	-- STA @257
tmp(10) := x"STA & '1' & x"02";	-- STA @258
tmp(11) := x"STA & '0' & x"00";	-- STA @0    	#Armazenando 0 em unidade, dezena, centena, etc
tmp(12) := x"STA & '0' & x"01";	-- STA @1
tmp(13) := x"STA & '0' & x"02";	-- STA @2
tmp(14) := x"STA & '0' & x"03";	-- STA @3
tmp(15) := x"STA & '0' & x"04";	-- STA @4
tmp(16) := x"STA & '0' & x"05";	-- STA @5
tmp(17) := x"STA & '0' & x"06";	-- STA @6    	#Constante de comparacao (0)
tmp(18) := x"STA & '0' & x"0F";	-- STA @15   	#Flag que para contagem
tmp(19) := x"STA & '1' & x"FE";	-- STA @510
tmp(20) := x"STA & '1' & x"FF";	-- STA @511
tmp(21) := x"STA & '1' & x"FD";	-- STA @509
tmp(22) := x"LDI & '0' & x"01";	-- LDI $1
tmp(23) := x"STA & '0' & x"07";	-- STA @7    	#Constante de Incremento (1)
tmp(24) := x"LDI & '0' & x"0A";	-- LDI $10
tmp(25) := x"STA & '0' & x"08";	-- STA @8    	#Constante de limite no display (10)
tmp(26) := x"LDI & '0' & x"00";	-- LDI $0
tmp(27) := x"STA & '0' & x"09";	-- STA @9    	#Limite de contagem em unidade, dezena, centena, etc
tmp(28) := x"STA & '0' & x"0A";	-- STA @10  
tmp(29) := x"STA & '0' & x"0B";	-- STA @11
tmp(30) := x"STA & '0' & x"0C";	-- STA @12
tmp(31) := x"STA & '0' & x"0D";	-- STA @13
tmp(32) := x"STA & '0' & x"0E";	-- STA @14
tmp(33) := x"LDI & '0' & x"09";	-- LDI $9
tmp(34) := x"STA & '0' & x"10";	-- STA @16  	#Constante de limite de valor
tmp(35) := x"NOP & '0' & x"00";	-- NOP  	#Loop principal
tmp(36) := x"LDA & '1' & x"61";	-- LDA @353 	# Le o valor de KEY1
tmp(37) := x"CEQ & '0' & x"06";	-- CEQ @6 	# Compara o valor de KEY1 com 0
tmp(38) := x"JEQ & '0' & x"23";	-- JEQ @INICIOLOOP 	# Se for igual a 0, fica no aguardo para quando for 1
tmp(39) := x"JSR & '0' & x"3E";	-- JSR @CONFIGLIMITE 	# Se for diferente de 0, entra na sub rotina de configuracao de Limite
tmp(40) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(41) := x"STA & '1' & x"20";	-- STA @288 	# Zera o HEX1
tmp(42) := x"STA & '1' & x"21";	-- STA @289 	# Zera o HEX2
tmp(43) := x"STA & '1' & x"22";	-- STA @290 	# Zera o HEX3
tmp(44) := x"STA & '1' & x"23";	-- STA @291 	# Zera o HEX4
tmp(45) := x"STA & '1' & x"24";	-- STA @292 	# Zera o HEX5
tmp(46) := x"STA & '1' & x"25";	-- STA @293 	# Zera o HEX6
tmp(47) := x"STA & '1' & x"00";	-- STA @256 	# Zera os LEDS(7~0)
tmp(48) := x"STA & '1' & x"02";	-- STA @258 	# Zera os LED(9)
tmp(49) := x"STA & '1' & x"01";	-- STA @257 	# Zera os LED(8) 
tmp(50) := x"NOP & '0' & x"00";	-- NOP  	# Incrementa ate chegar no limite de contagem
tmp(51) := x"LDA & '1' & x"60";	-- LDA @352 	# Le o valor de KEY0
tmp(52) := x"CEQ & '0' & x"06";	-- CEQ @6   	# Compara o valor de KEY0 com 0
tmp(53) := x"JEQ & '0' & x"37";	-- JEQ @PULA1 	# Se for igual a 0, nao incrementa e atualiza os displays
tmp(54) := x"JSR & '0' & x"CD";	-- JSR @INCREMENTA 	# Se for diferente de 0, entra na sub rotina de incremento
tmp(55) := x"NOP & '0' & x"00";	-- NOP 
tmp(56) := x"JSR & '1' & x"0A";	-- JSR @ATUALIZA 	# Atualiza os displays
tmp(57) := x"JSR & '1' & x"18";	-- JSR @CHECALIMITE 	# Checa pra ver se passou do limite setado
tmp(58) := x"LDA & '0' & x"0F";	-- LDA @15 	# Le o valor da flag de inibir contagem
tmp(59) := x"CEQ & '0' & x"06";	-- CEQ @6 	# Compara com 0 a flag (flag com valor 1 -> ativa, flag com valor 0 -> desativada)
tmp(60) := x"JEQ & '0' & x"32";	-- JEQ @INCREMENTADOR 	#Se a flag for 0, pode continuar incrementando
tmp(61) := x"JMP & '1' & x"3B";	-- JMP @TRAVA 	# Se for 1, trava a contagem
tmp(62) := x"NOP & '0' & x"00";	-- NOP  	#Rotina de configuracao de limite
tmp(63) := x"LDI & '0' & x"01";	-- LDI $1 	# Carrega o valor 1
tmp(64) := x"STA & '1' & x"00";	-- STA @256 	# Bota no endereco dos LEDS(7-0)
tmp(65) := x"STA & '1' & x"FE";	-- STA @510 	#Limpa a leitura de KEY1
tmp(66) := x"NOP & '0' & x"00";	-- NOP 
tmp(67) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(68) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(69) := x"JGT & '0' & x"47";	-- JGT @VALORATUALIZADO 	#Se for maior que 9, atualiza os displays
tmp(70) := x"JMP & '0' & x"49";	-- JMP @IGNORA
tmp(71) := x"NOP & '0' & x"00";	-- NOP 
tmp(72) := x"LDI & '0' & x"09";	-- LDI $9
tmp(73) := x"NOP & '0' & x"00";	-- NOP 
tmp(74) := x"STA & '1' & x"20";	-- STA @288 	# Hex 0
tmp(75) := x"LDA & '1' & x"61";	-- LDA @353 	# Le KEY1
tmp(76) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara KEY1 com 0
tmp(77) := x"JEQ & '0' & x"42";	-- JEQ @ESPERAUNIDADE  	#Se for 0, ou seja, nao esta apertado, espera ate apertar
tmp(78) := x"STA & '1' & x"FE";	-- STA @510 	#Limpa a leitura de KEY1
tmp(79) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(80) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(81) := x"JGT & '0' & x"53";	-- JGT @VALORATUALIZADO2 	#Se for maior que 9, atualiza os displays
tmp(82) := x"JMP & '0' & x"55";	-- JMP @IGNORA2
tmp(83) := x"NOP & '0' & x"00";	-- NOP 
tmp(84) := x"LDI & '0' & x"09";	-- LDI $9
tmp(85) := x"NOP & '0' & x"00";	-- NOP 
tmp(86) := x"STA & '0' & x"09";	-- STA @9   	#Armazena o valor das chaves no limite das unidades
tmp(87) := x"NOP & '0' & x"00";	-- NOP 
tmp(88) := x"LDI & '0' & x"04";	-- LDI $4 	#Carrega o valor 4
tmp(89) := x"STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(90) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(91) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(92) := x"JGT & '0' & x"5E";	-- JGT @VALORATUALIZADO3 	#Se for maior que 9, atualiza os displays
tmp(93) := x"JMP & '0' & x"60";	-- JMP @IGNORA3
tmp(94) := x"NOP & '0' & x"00";	-- NOP 
tmp(95) := x"LDI & '0' & x"09";	-- LDI $9
tmp(96) := x"NOP & '0' & x"00";	-- NOP 
tmp(97) := x"STA & '1' & x"21";	-- STA @289 	# Hex 1
tmp(98) := x"LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(99) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(100) := x"JEQ & '0' & x"57";	-- JEQ @ESPERADEZENA 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(101) := x"STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(102) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(103) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(104) := x"JGT & '0' & x"6A";	-- JGT @VALORATUALIZADO4 	#Se for maior que 9, atualiza os displays
tmp(105) := x"JMP & '0' & x"6C";	-- JMP @IGNORA4
tmp(106) := x"NOP & '0' & x"00";	-- NOP 
tmp(107) := x"LDI & '0' & x"09";	-- LDI $9
tmp(108) := x"NOP & '0' & x"00";	-- NOP 
tmp(109) := x"STA & '0' & x"0A";	-- STA @10 	#Armazena o valor das chaves no limte das dezenas
tmp(110) := x"NOP & '0' & x"00";	-- NOP 
tmp(111) := x"LDI & '0' & x"10";	-- LDI $16 	# Carrega o valor 16 no acumulador
tmp(112) := x"STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(113) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(114) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(115) := x"JGT & '0' & x"75";	-- JGT @VALORATUALIZADO5 	#Se for maior que 9, atualiza os displays
tmp(116) := x"JMP & '0' & x"77";	-- JMP @IGNORA5
tmp(117) := x"NOP & '0' & x"00";	-- NOP 
tmp(118) := x"LDI & '0' & x"09";	-- LDI $9
tmp(119) := x"NOP & '0' & x"00";	-- NOP 
tmp(120) := x"STA & '1' & x"22";	-- STA @290 	# Hex 2
tmp(121) := x"LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(122) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(123) := x"JEQ & '0' & x"6E";	-- JEQ @ESPERACENTENA 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(124) := x"STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(125) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(126) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(127) := x"JGT & '0' & x"81";	-- JGT @VALORATUALIZADO6 	#Se for maior que 9, atualiza os displays
tmp(128) := x"JMP & '0' & x"83";	-- JMP @IGNORA6
tmp(129) := x"NOP & '0' & x"00";	-- NOP 
tmp(130) := x"LDI & '0' & x"09";	-- LDI $9
tmp(131) := x"NOP & '0' & x"00";	-- NOP 
tmp(132) := x"STA & '0' & x"0B";	-- STA @11 	#Armazena o valor das chaves no limite das centenas
tmp(133) := x"NOP & '0' & x"00";	-- NOP 
tmp(134) := x"LDI & '0' & x"20";	-- LDI $32 	# Carrega o valor 32 no acumulador
tmp(135) := x"STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(136) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(137) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(138) := x"JGT & '0' & x"8C";	-- JGT @VALORATUALIZADO7 	#Se for maior que 9, atualiza os displays
tmp(139) := x"JMP & '0' & x"8E";	-- JMP @IGNORA7
tmp(140) := x"NOP & '0' & x"00";	-- NOP 
tmp(141) := x"LDI & '0' & x"09";	-- LDI $9
tmp(142) := x"NOP & '0' & x"00";	-- NOP 
tmp(143) := x"STA & '1' & x"23";	-- STA @291 	# Hex 3
tmp(144) := x"LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(145) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1
tmp(146) := x"JEQ & '0' & x"85";	-- JEQ @ESPERAUNIDADEMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(147) := x"STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(148) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(149) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(150) := x"JGT & '0' & x"98";	-- JGT @VALORATUALIZADO8 	#Se for maior que 9, atualiza os displays
tmp(151) := x"JMP & '0' & x"9A";	-- JMP @IGNORA8
tmp(152) := x"NOP & '0' & x"00";	-- NOP 
tmp(153) := x"LDI & '0' & x"09";	-- LDI $9
tmp(154) := x"NOP & '0' & x"00";	-- NOP 
tmp(155) := x"STA & '0' & x"0C";	-- STA @12 	#Armazena o valor das chaves no limite das unidades de milhar
tmp(156) := x"NOP & '0' & x"00";	-- NOP 
tmp(157) := x"LDI & '0' & x"80";	-- LDI $128 	# Carrega o valor 128 no acumulador
tmp(158) := x"STA & '1' & x"00";	-- STA @256 	# Bota o valor nos LEDS
tmp(159) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(160) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(161) := x"JGT & '0' & x"A3";	-- JGT @VALORATUALIZADO9 	#Se for maior que 9, atualiza os displays
tmp(162) := x"JMP & '0' & x"A5";	-- JMP @IGNORA9
tmp(163) := x"NOP & '0' & x"00";	-- NOP 
tmp(164) := x"LDI & '0' & x"09";	-- LDI $9
tmp(165) := x"NOP & '0' & x"00";	-- NOP 
tmp(166) := x"STA & '1' & x"24";	-- STA @292 	# Hex 4
tmp(167) := x"LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(168) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1 
tmp(169) := x"JEQ & '0' & x"9C";	-- JEQ @ESPERADEZENAMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(170) := x"STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(171) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(172) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(173) := x"JGT & '0' & x"AF";	-- JGT @VALORATUALIZADO10 	#Se for maior que 9, atualiza os displays
tmp(174) := x"JMP & '0' & x"B1";	-- JMP @IGNORA10
tmp(175) := x"NOP & '0' & x"00";	-- NOP 
tmp(176) := x"LDI & '0' & x"09";	-- LDI $9
tmp(177) := x"NOP & '0' & x"00";	-- NOP 
tmp(178) := x"STA & '0' & x"0D";	-- STA @13 	#Armazena o valor das chaves no limite das dezenas de milhar
tmp(179) := x"NOP & '0' & x"00";	-- NOP 
tmp(180) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(181) := x"STA & '1' & x"00";	-- STA @256 	# Zera o valor nos LEDS(7~0)
tmp(182) := x"LDI & '0' & x"01";	-- LDI $1 	# Carrega o valor 1 no acumulador
tmp(183) := x"STA & '1' & x"01";	-- STA @257 	# Bota o valor nos LEDS
tmp(184) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(185) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(186) := x"JGT & '0' & x"BC";	-- JGT @VALORATUALIZADO11 	#Se for maior que 9, atualiza os displays
tmp(187) := x"JMP & '0' & x"BE";	-- JMP @IGNORA11
tmp(188) := x"NOP & '0' & x"00";	-- NOP 
tmp(189) := x"LDI & '0' & x"09";	-- LDI $9
tmp(190) := x"NOP & '0' & x"00";	-- NOP 
tmp(191) := x"STA & '1' & x"25";	-- STA @293 	# Hex 5
tmp(192) := x"LDA & '1' & x"61";	-- LDA @353 	#Le o valor de KEY1 novamente
tmp(193) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o valor de KEY1
tmp(194) := x"JEQ & '0' & x"B3";	-- JEQ @ESPERACENTENAMILHAR 	#Se for igual a 0, ficar em LOOP "esperando" o valor mudar
tmp(195) := x"STA & '1' & x"FE";	-- STA @510 	#Se for diferente de 0, Limpa a leitura de KEY1
tmp(196) := x"LDA & '1' & x"40";	-- LDA @320 	#Le o valor das chaves SW(7~0)
tmp(197) := x"GT & '0' & x"10";	-- GT @16 	#Compara com 9
tmp(198) := x"JGT & '0' & x"C8";	-- JGT @VALORATUALIZADO12 	#Se for maior que 9, atualiza os displays
tmp(199) := x"JMP & '0' & x"CA";	-- JMP @IGNORA12
tmp(200) := x"NOP & '0' & x"00";	-- NOP 
tmp(201) := x"LDI & '0' & x"09";	-- LDI $9
tmp(202) := x"NOP & '0' & x"00";	-- NOP 
tmp(203) := x"STA & '0' & x"0E";	-- STA @14 	#Armazena o valor das chaves no limite das centenas de milhar
tmp(204) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(205) := x"NOP & '0' & x"00";	-- NOP 
tmp(206) := x"STA & '1' & x"FF";	-- STA @511 	#Limpa a leitura de KEY1
tmp(207) := x"NOP & '0' & x"00";	-- NOP 
tmp(208) := x"LDA & '0' & x"00";	-- LDA @0 	#Carrega o valor da unidade no acumulador
tmp(209) := x"SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na unidade
tmp(210) := x"CEQ & '0' & x"08";	-- CEQ @8      	#Compara unidade com 10
tmp(211) := x"JEQ & '0' & x"D6";	-- JEQ @UNIDADEPASSOU  	#Se for igual a 10, incrementa a dezena
tmp(212) := x"STA & '0' & x"00";	-- STA @0 	#Se for diferente de 10, armazena o valor da unidade
tmp(213) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(214) := x"NOP & '0' & x"00";	-- NOP 
tmp(215) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(216) := x"STA & '0' & x"00";	-- STA @0 	#Zera a unidade
tmp(217) := x"LDA & '0' & x"01";	-- LDA @1 	#Carrega o valor da dezena no acumulador
tmp(218) := x"SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na dezena 
tmp(219) := x"CEQ & '0' & x"08";	-- CEQ @8      	#Compara dezena com 10
tmp(220) := x"JEQ & '0' & x"DF";	-- JEQ @DEZENAPASSOU 	#Se for igual a 10, incrementa a centena
tmp(221) := x"STA & '0' & x"01";	-- STA @1 	#Se for diferente de 10, armazena o valor da dezena
tmp(222) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(223) := x"NOP & '0' & x"00";	-- NOP 
tmp(224) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(225) := x"STA & '0' & x"01";	-- STA @1 	#Zera a dezena
tmp(226) := x"LDA & '0' & x"02";	-- LDA @2 	#Carrega o valor da centena no acumulador
tmp(227) := x"SOMA & '0' & x"07";	-- SOMA @7     	#Incrementa 1 na centena
tmp(228) := x"CEQ & '0' & x"08";	-- CEQ @8      	#Compara centena com 10
tmp(229) := x"JEQ & '0' & x"E8";	-- JEQ @CENTENAPASSOU 	#Se for igual a 10, incrementa a unidade de milhar
tmp(230) := x"STA & '0' & x"02";	-- STA @2 	#Se for diferente de 10, armazena o valor da centena
tmp(231) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(232) := x"NOP & '0' & x"00";	-- NOP 
tmp(233) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(234) := x"STA & '0' & x"02";	-- STA @2 	#Zera a centena
tmp(235) := x"LDA & '0' & x"03";	-- LDA @3 	#Carrega o valor da unidade de milhar no acumulador
tmp(236) := x"SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na unidade de milhar
tmp(237) := x"CEQ & '0' & x"08";	-- CEQ @8  	#Compara unidade de milhar com 10
tmp(238) := x"JEQ & '0' & x"F1";	-- JEQ @UNIDADEMILHARPASSOU 	#Se for igual a 10, incrementa a dezena de milhar
tmp(239) := x"STA & '0' & x"03";	-- STA @3 	#Se for diferente de 10, armazena o valor da unidade de milhar
tmp(240) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(241) := x"NOP & '0' & x"00";	-- NOP 
tmp(242) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(243) := x"STA & '0' & x"03";	-- STA @3 	#Zera a unidade de milhar
tmp(244) := x"LDA & '0' & x"04";	-- LDA @4 	#Carrega o valor da dezena de milhar no acumulador
tmp(245) := x"SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na dezena de milhar
tmp(246) := x"CEQ & '0' & x"08";	-- CEQ @8  	#Compara dezena de milhar com 10
tmp(247) := x"JEQ & '0' & x"FA";	-- JEQ @DEZENAMILHARPASSOU 	#Se for igual a 10, incrementa a centena de milhar
tmp(248) := x"STA & '0' & x"04";	-- STA @4 	#Se for diferente de 10, armazena o valor da dezena de milhar
tmp(249) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(250) := x"NOP & '0' & x"00";	-- NOP 
tmp(251) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(252) := x"STA & '0' & x"04";	-- STA @4 	#Zera a dezena de milhar
tmp(253) := x"LDA & '0' & x"05";	-- LDA @5 	#Carrega o valor da centena de milhar no acumulador
tmp(254) := x"SOMA & '0' & x"07";	-- SOMA @7 	#Incrementa 1 na centena de milhar
tmp(255) := x"CEQ & '0' & x"08";	-- CEQ @8  	#Compara centena de milhar com 10
tmp(256) := x"JEQ & '1' & x"03";	-- JEQ @CENTENAMILHARPASSOU 	#Se for igual a 10, incrementa a unidade de milhao
tmp(257) := x"STA & '0' & x"05";	-- STA @5 	#Se for diferente de 10, armazena o valor da centena de milhar
tmp(258) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(259) := x"NOP & '0' & x"00";	-- NOP 
tmp(260) := x"LDA & '0' & x"06";	-- LDA @6 	#Carrega 0 no acumulador
tmp(261) := x"STA & '0' & x"05";	-- STA @5 	#Zera a centena de milhar
tmp(262) := x"LDI & '0' & x"01";	-- LDI $1 	#Carrega 1 no acumulador
tmp(263) := x"STA & '1' & x"02";	-- STA @258 	#Acende o LED(9)
tmp(264) := x"STA & '0' & x"0F";	-- STA @15 	#Ativa a flag de inibir incremento
tmp(265) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(266) := x"NOP & '0' & x"00";	-- NOP  	#Atualiza os valores dos HEX
tmp(267) := x"LDA & '0' & x"00";	-- LDA @0 	#Le o valor das unidades
tmp(268) := x"STA & '1' & x"20";	-- STA @288 	#Armazena o valor das unidades no HEX0
tmp(269) := x"LDA & '0' & x"01";	-- LDA @1 	#Le o valor das dezenas
tmp(270) := x"STA & '1' & x"21";	-- STA @289 	#Armazena o valor das dezenas no HEX1
tmp(271) := x"LDA & '0' & x"02";	-- LDA @2 	#Le o valor das centenas
tmp(272) := x"STA & '1' & x"22";	-- STA @290 	#Armazena o valor das centenas no HEX2
tmp(273) := x"LDA & '0' & x"03";	-- LDA @3 	#Le o valor das unidades de milhar
tmp(274) := x"STA & '1' & x"23";	-- STA @291 	#Armazena o valor das unidades de milhar no HEX3
tmp(275) := x"LDA & '0' & x"04";	-- LDA @4 	#Le o valor das dezenas de milhar
tmp(276) := x"STA & '1' & x"24";	-- STA @292 	#Armazena o valor das dezenas de milhar no HEX4
tmp(277) := x"LDA & '0' & x"05";	-- LDA @5 	#Le o valor das centenas de milhar
tmp(278) := x"STA & '1' & x"25";	-- STA @293 	#Armazena o valor das centenas de milhar no HEX5
tmp(279) := x"RET & '0' & x"00";	-- RET 	#Retorna para o LOOP principal
tmp(280) := x"NOP & '0' & x"00";	-- NOP 
tmp(281) := x"LDA & '0' & x"00";	-- LDA @0 	#Le o valor das unidades
tmp(282) := x"CEQ & '0' & x"09";	-- CEQ @9 	# Compara com o valor limite das unidades
tmp(283) := x"JEQ & '1' & x"1D";	-- JEQ @CHECADEZENA 	#Se for igual, checa se ocorre com as dezenas
tmp(284) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(285) := x"NOP & '0' & x"00";	-- NOP 
tmp(286) := x"LDA & '0' & x"01";	-- LDA @1 	#Le o valor das dezenas
tmp(287) := x"CEQ & '0' & x"0A";	-- CEQ @10 	#Compara com o valor limite das dezenas
tmp(288) := x"JEQ & '1' & x"22";	-- JEQ @CHECACENTENA 	#Se for igual, checa se ocorre com as centenas
tmp(289) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(290) := x"NOP & '0' & x"00";	-- NOP 
tmp(291) := x"LDA & '0' & x"02";	-- LDA @2 	#Le o valor das centenas
tmp(292) := x"CEQ & '0' & x"0B";	-- CEQ @11 	#Compara com o valor limite das centenas
tmp(293) := x"JEQ & '1' & x"27";	-- JEQ @CHECAUNIDADEMILHAR 	#Se for igual, checa se ocorre com as unidades de milhar
tmp(294) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(295) := x"NOP & '0' & x"00";	-- NOP 
tmp(296) := x"LDA & '0' & x"03";	-- LDA @3 	# Le o valor das unidades de milhar
tmp(297) := x"CEQ & '0' & x"0C";	-- CEQ @12 	# Compara com o valor limite das unidades de milhar 
tmp(298) := x"JEQ & '1' & x"2C";	-- JEQ @CHECADEZENAMILHAR 	#Se for igual, checa se ocorre com as dezenas de milhar
tmp(299) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(300) := x"NOP & '0' & x"00";	-- NOP 
tmp(301) := x"LDA & '0' & x"04";	-- LDA @4 	# Le o valor das dezenas de milhar
tmp(302) := x"CEQ & '0' & x"0D";	-- CEQ @13 	# Compara com o valor limite das dezenas de milhar 
tmp(303) := x"JEQ & '1' & x"31";	-- JEQ @CHECACENTENAMILHAR 	#Se for igual, checa se ocorre com as centenas de milhar
tmp(304) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(305) := x"NOP & '0' & x"00";	-- NOP 
tmp(306) := x"LDA & '0' & x"05";	-- LDA @5 	# Le o valor das centenas de milhar
tmp(307) := x"CEQ & '0' & x"0E";	-- CEQ @14 	# Compara com o valor limite das centenas de milhar 
tmp(308) := x"JEQ & '1' & x"36";	-- JEQ @BATEUNOLIMITE 	#Se for igual, indica que o limite foi batido
tmp(309) := x"RET & '0' & x"00";	-- RET 	#Se for diferente, retorna para o LOOP principal
tmp(310) := x"NOP & '0' & x"00";	-- NOP 
tmp(311) := x"LDI & '0' & x"01";	-- LDI $1 	#Atribui o valor 1 no acumulador
tmp(312) := x"STA & '0' & x"0F";	-- STA @15 	#Ativa a flag de parar contagem
tmp(313) := x"STA & '1' & x"02";	-- STA @258 	#Ativa o LED de limite atingido 
tmp(314) := x"RET & '0' & x"00";	-- RET 	#Retorna pro LOOP principal
tmp(315) := x"NOP & '0' & x"00";	-- NOP  	#Trava a contagem
tmp(316) := x"LDI & '0' & x"01";	-- LDI $1
tmp(317) := x"STA & '1' & x"00";	-- STA @256
tmp(318) := x"LDA & '1' & x"64";	-- LDA @356 	#Le o valor do botao FPGA
tmp(319) := x"CEQ & '0' & x"06";	-- CEQ @6 	#Compara com 0 o botao FPGA
tmp(320) := x"JEQ & '1' & x"3B";	-- JEQ @TRAVA 	#Se for igual, continua travado
tmp(321) := x"JMP & '0' & x"00";	-- JMP @RESTART 	#Se for diferente, reinicia a contagem
